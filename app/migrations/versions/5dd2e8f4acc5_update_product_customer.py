"""update product customer

Revision ID: 5dd2e8f4acc5
Revises: dd668571894a
Create Date: 2025-03-06 22:33:17.904589

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "5dd2e8f4acc5"
down_revision: Union[str, None] = "dd668571894a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("customer_product_contracts")
    op.drop_table("customers")
    op.drop_table("product_plans")
    op.drop_table("contracts")
    op.drop_table("vouchers")
    op.drop_table("invoices")
    op.drop_table("users")
    op.drop_table("products")
    op.drop_table("inbox_messages")
    op.drop_table("customer_products")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "customer_products",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "customer_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "product_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "product_plan_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("seats", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "start_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "end_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "next_payment_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "voucher_uuid", sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cancellation_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["customer_uuid"],
            ["customers.uuid"],
            name="customer_products_customer_uuid_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["product_plan_uuid"],
            ["product_plans.uuid"],
            name="customer_products_product_plan_uuid_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["product_uuid"],
            ["products.uuid"],
            name="customer_products_product_uuid_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["voucher_uuid"],
            ["vouchers.uuid"],
            name="customer_products_voucher_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="customer_products_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "inbox_messages",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "customer_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "subject", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("message", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "UNREAD", "READ", "ARCHIVED", name="messagestatusenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["customer_uuid"],
            ["customers.uuid"],
            name="inbox_messages_customer_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="inbox_messages_pkey"),
    )
    op.create_table(
        "products",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("uuid", name="products_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "users",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "customer_uuid", sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("ADMIN", "NORMAL", name="roleenum"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["customer_uuid"],
            ["customers.uuid"],
            name="users_customer_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="users_pkey"),
        sa.UniqueConstraint("email", name="users_email_key"),
    )
    op.create_table(
        "invoices",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "customer_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "status",
            postgresql.ENUM(
                "PENDING", "PAID", "OVERDUE", name="invoicestatusenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "total_amount", sa.NUMERIC(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["customer_uuid"],
            ["customers.uuid"],
            name="invoices_customer_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="invoices_pkey"),
    )
    op.create_table(
        "vouchers",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("code", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "product_plan_uuid", sa.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "discount_percentage",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "discount_fixed_amount",
            sa.NUMERIC(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "valid_from",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "valid_until",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "max_redemptions",
            sa.INTEGER(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "redeemed_count", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["product_plan_uuid"],
            ["product_plans.uuid"],
            name="vouchers_product_plan_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="vouchers_pkey"),
        sa.UniqueConstraint("code", name="vouchers_code_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "contracts",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "key",
            postgresql.ENUM(
                "AGB_APP_ZUM_DOC_PATIENT",
                "AGB_MEDIQUU_CONNECT",
                "AGB_APP_ZUM_DOC",
                "AGB_MEDIQUU_NETZMANAGER",
                "AGB_MEDIQUU_CHAT",
                "PRIVACY_CONCEPT",
                "PRIVACY_CONCEPT_TASKS",
                "AVV",
                "AVV_TASKS",
                "NDA",
                "SUB",
                "TOM",
                name="contractkeyenum",
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "version", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("uuid", name="contracts_pkey"),
    )
    op.create_table(
        "product_plans",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "product_uuid", sa.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "type",
            postgresql.ENUM(
                "MONTHLY", "QUARTERLY", "YEARLY", name="plantypeenum"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "cost_euro", sa.NUMERIC(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "seat_based", sa.BOOLEAN(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["product_uuid"],
            ["products.uuid"],
            name="product_plans_product_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint("uuid", name="product_plans_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "customers",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "website_url", sa.VARCHAR(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "address", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "house_number", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("care_of", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "postal_code", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column("city", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "country", sa.VARCHAR(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("uuid", name="customers_pkey"),
        sa.UniqueConstraint("email", name="customers_email_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "customer_product_contracts",
        sa.Column("uuid", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "products_customer_uuid",
            sa.UUID(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "accepted_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["products_customer_uuid"],
            ["customer_products.uuid"],
            name="customer_product_contracts_products_customer_uuid_fkey",
        ),
        sa.PrimaryKeyConstraint(
            "uuid", name="customer_product_contracts_pkey"
        ),
    )
    # ### end Alembic commands ###
